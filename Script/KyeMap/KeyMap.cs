//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Script/KyeMap/KeyMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KeyMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KeyMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KeyMap"",
    ""maps"": [
        {
            ""name"": ""KeybordMouse"",
            ""id"": ""a1c650e7-88ce-45c2-a87f-c0697234d2f1"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b1d0edc9-f2ac-42d4-9c01-1cdaf8e2f158"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack1"",
                    ""type"": ""Button"",
                    ""id"": ""d6b4c1f7-45c2-40af-a9f3-15126692fef6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack2"",
                    ""type"": ""Button"",
                    ""id"": ""402526f1-af28-4907-9c1a-40adfaf5ffb7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shift"",
                    ""type"": ""Button"",
                    ""id"": ""bf101e2b-1666-41aa-9538-2528654c03b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""1bd4c660-d5d8-49f6-a7ff-f96dd4c00f33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a6e179d0-c6a9-4ae3-85f3-fb262182e3f7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""243496e8-3c4a-4d2d-8237-3598b51d86f3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ef2a38f5-9e9b-42f0-bc5e-a1865cd058bf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5d0bea59-1c2f-4acb-bc1c-9bf854b9c05f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1298025b-3d4a-41d8-a036-4b2035802b01"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""94981d5e-f654-47c3-aaa8-91de0aa61a8a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Attack1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b83f164-1b7a-40ba-a622-9c57165a05a8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cfd83623-3239-4dfa-a700-0242fc029838"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17f2c5f9-00c1-45f6-be89-326109949f54"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Attack2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pad"",
            ""id"": ""80cc4857-5f24-48b0-a1ef-c99da288b5d8"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""da0e050a-b867-4238-9eb1-a02b5e94c977"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack1"",
                    ""type"": ""Button"",
                    ""id"": ""1b76953f-6343-4783-a1f5-587541fd818d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack2"",
                    ""type"": ""Button"",
                    ""id"": ""86fdffd3-60ef-4ced-84ca-9c812a762fea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sub1"",
                    ""type"": ""Button"",
                    ""id"": ""ddf0a071-d872-4649-9a3d-3bf718824b85"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sub2"",
                    ""type"": ""Button"",
                    ""id"": ""42bb409e-e73d-456a-a2b4-38be6403cf6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shift"",
                    ""type"": ""Button"",
                    ""id"": ""be3e43c9-4ba7-4c75-82ab-cc078668d910"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""06483adf-5f32-47b5-a3dc-6352e6dbfb26"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e558d3f2-0bfd-4859-b766-edf863b47874"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26e3767e-660c-4991-bf7e-8f7447a5d0ca"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Attack1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ebc4d563-f9bc-49cf-a439-58625eaa1f10"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Attack2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a897f7a-8f47-4121-b399-02b916cb980a"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Sub1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79d1b7d6-d605-407e-903f-aaed11dcf869"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Sub2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ceda5d1f-fc13-412a-9617-950e3e94965f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a7f39b8-814f-4c5e-9976-dc55d072a0a7"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""JoyStick"",
            ""id"": ""9cab7ca6-4bad-4848-9bdc-d693eecdf9a6"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""0b81be57-ecec-4038-aa6b-2a1e04e28827"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack1"",
                    ""type"": ""Button"",
                    ""id"": ""7f84ddaf-91b4-40f1-94f8-dee33842017f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack2"",
                    ""type"": ""Button"",
                    ""id"": ""056beaf9-df52-4cdf-86b1-d80d7d33b03b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sub1"",
                    ""type"": ""Button"",
                    ""id"": ""d5088ea0-ba84-40a4-9c58-e913d1073a81"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sub2"",
                    ""type"": ""Button"",
                    ""id"": ""f848f7f3-a78f-413a-b40f-1f6fc2e44bc5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shift"",
                    ""type"": ""Button"",
                    ""id"": ""802aedb5-474b-404f-8269-0eb35846cf3a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""f36093b3-7e50-4b84-aeb7-7109f8cf3f70"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b51c4e82-21ca-4772-bd0c-24bdb53c46f5"",
                    ""path"": ""<HID::Nintendo Co., Ltd. USB Gamepad>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8892658a-a117-452b-b1be-ba87e065bf06"",
                    ""path"": ""<HID::Nintendo Co., Ltd. USB Gamepad>/button7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Attack1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""411c48b7-6b69-42a8-861f-c21fa7426a0f"",
                    ""path"": ""<HID::Nintendo Co., Ltd. USB Gamepad>/button6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Attack2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26f1309c-7288-4cdc-bf11-deaf242f87db"",
                    ""path"": ""<HID::Nintendo Co., Ltd. USB Gamepad>/button5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Sub1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba875b7c-5b01-4fe1-b85d-9991c681f224"",
                    ""path"": ""<HID::Nintendo Co., Ltd. USB Gamepad>/button4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Sub2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3fcc610e-511e-47d4-8b8c-54fbd6fda009"",
                    ""path"": ""<HID::Nintendo Co., Ltd. USB Gamepad>/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e91ddf46-1549-461d-8c1d-279f1898dba6"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Share"",
            ""id"": ""cf6cacc4-9a89-4a05-97ba-bba99fc8ba3b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""80226e94-6074-43ff-93c9-1770e7e2f8ef"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""6a5f23bc-b148-40c2-896f-28da429c51bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack1"",
                    ""type"": ""Button"",
                    ""id"": ""0d55e006-7363-4104-baf4-dc6ded478961"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack2"",
                    ""type"": ""Button"",
                    ""id"": ""bfb8c767-42ca-4f58-beea-1bf7df6533d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""e76d1cc1-c7f7-46ed-aac9-b578780d346e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""532d8849-66ad-47b0-91c4-7dbf1b1666d1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c4f7b79e-dd4f-4a38-a271-cb972500f52f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c5aa74e4-0a27-4d3a-8169-b7add58bdf49"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""40160643-4083-44b5-9083-1ae3bf5ecc07"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""dd0c5bad-ebaa-4a20-a3b9-8ad4e0c56d91"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b18f20d-0c3a-4375-8061-dc774803dda1"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72a49602-6a11-46b9-9166-e60d164cda29"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16392ad1-758f-4741-96ae-a1e074ce1485"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Attack1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b59af566-c071-4e42-afba-61b3bf0697ed"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Attack1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ef8d96f-3f72-4e91-85de-02e9015265e9"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Attack2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fdc032a-4a1e-49de-9d1b-071c3a2d540e"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Attack2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Pad"",
            ""bindingGroup"": ""Pad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keybord"",
            ""bindingGroup"": ""Keybord"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // KeybordMouse
        m_KeybordMouse = asset.FindActionMap("KeybordMouse", throwIfNotFound: true);
        m_KeybordMouse_Move = m_KeybordMouse.FindAction("Move", throwIfNotFound: true);
        m_KeybordMouse_Attack1 = m_KeybordMouse.FindAction("Attack1", throwIfNotFound: true);
        m_KeybordMouse_Attack2 = m_KeybordMouse.FindAction("Attack2", throwIfNotFound: true);
        m_KeybordMouse_Shift = m_KeybordMouse.FindAction("Shift", throwIfNotFound: true);
        m_KeybordMouse_Pause = m_KeybordMouse.FindAction("Pause", throwIfNotFound: true);
        // Pad
        m_Pad = asset.FindActionMap("Pad", throwIfNotFound: true);
        m_Pad_Move = m_Pad.FindAction("Move", throwIfNotFound: true);
        m_Pad_Attack1 = m_Pad.FindAction("Attack1", throwIfNotFound: true);
        m_Pad_Attack2 = m_Pad.FindAction("Attack2", throwIfNotFound: true);
        m_Pad_Sub1 = m_Pad.FindAction("Sub1", throwIfNotFound: true);
        m_Pad_Sub2 = m_Pad.FindAction("Sub2", throwIfNotFound: true);
        m_Pad_Shift = m_Pad.FindAction("Shift", throwIfNotFound: true);
        m_Pad_Pause = m_Pad.FindAction("Pause", throwIfNotFound: true);
        // JoyStick
        m_JoyStick = asset.FindActionMap("JoyStick", throwIfNotFound: true);
        m_JoyStick_Move = m_JoyStick.FindAction("Move", throwIfNotFound: true);
        m_JoyStick_Attack1 = m_JoyStick.FindAction("Attack1", throwIfNotFound: true);
        m_JoyStick_Attack2 = m_JoyStick.FindAction("Attack2", throwIfNotFound: true);
        m_JoyStick_Sub1 = m_JoyStick.FindAction("Sub1", throwIfNotFound: true);
        m_JoyStick_Sub2 = m_JoyStick.FindAction("Sub2", throwIfNotFound: true);
        m_JoyStick_Shift = m_JoyStick.FindAction("Shift", throwIfNotFound: true);
        m_JoyStick_Pause = m_JoyStick.FindAction("Pause", throwIfNotFound: true);
        // Share
        m_Share = asset.FindActionMap("Share", throwIfNotFound: true);
        m_Share_Move = m_Share.FindAction("Move", throwIfNotFound: true);
        m_Share_Pause = m_Share.FindAction("Pause", throwIfNotFound: true);
        m_Share_Attack1 = m_Share.FindAction("Attack1", throwIfNotFound: true);
        m_Share_Attack2 = m_Share.FindAction("Attack2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KeybordMouse
    private readonly InputActionMap m_KeybordMouse;
    private IKeybordMouseActions m_KeybordMouseActionsCallbackInterface;
    private readonly InputAction m_KeybordMouse_Move;
    private readonly InputAction m_KeybordMouse_Attack1;
    private readonly InputAction m_KeybordMouse_Attack2;
    private readonly InputAction m_KeybordMouse_Shift;
    private readonly InputAction m_KeybordMouse_Pause;
    public struct KeybordMouseActions
    {
        private @KeyMap m_Wrapper;
        public KeybordMouseActions(@KeyMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_KeybordMouse_Move;
        public InputAction @Attack1 => m_Wrapper.m_KeybordMouse_Attack1;
        public InputAction @Attack2 => m_Wrapper.m_KeybordMouse_Attack2;
        public InputAction @Shift => m_Wrapper.m_KeybordMouse_Shift;
        public InputAction @Pause => m_Wrapper.m_KeybordMouse_Pause;
        public InputActionMap Get() { return m_Wrapper.m_KeybordMouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeybordMouseActions set) { return set.Get(); }
        public void SetCallbacks(IKeybordMouseActions instance)
        {
            if (m_Wrapper.m_KeybordMouseActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_KeybordMouseActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_KeybordMouseActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_KeybordMouseActionsCallbackInterface.OnMove;
                @Attack1.started -= m_Wrapper.m_KeybordMouseActionsCallbackInterface.OnAttack1;
                @Attack1.performed -= m_Wrapper.m_KeybordMouseActionsCallbackInterface.OnAttack1;
                @Attack1.canceled -= m_Wrapper.m_KeybordMouseActionsCallbackInterface.OnAttack1;
                @Attack2.started -= m_Wrapper.m_KeybordMouseActionsCallbackInterface.OnAttack2;
                @Attack2.performed -= m_Wrapper.m_KeybordMouseActionsCallbackInterface.OnAttack2;
                @Attack2.canceled -= m_Wrapper.m_KeybordMouseActionsCallbackInterface.OnAttack2;
                @Shift.started -= m_Wrapper.m_KeybordMouseActionsCallbackInterface.OnShift;
                @Shift.performed -= m_Wrapper.m_KeybordMouseActionsCallbackInterface.OnShift;
                @Shift.canceled -= m_Wrapper.m_KeybordMouseActionsCallbackInterface.OnShift;
                @Pause.started -= m_Wrapper.m_KeybordMouseActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_KeybordMouseActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_KeybordMouseActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_KeybordMouseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Attack1.started += instance.OnAttack1;
                @Attack1.performed += instance.OnAttack1;
                @Attack1.canceled += instance.OnAttack1;
                @Attack2.started += instance.OnAttack2;
                @Attack2.performed += instance.OnAttack2;
                @Attack2.canceled += instance.OnAttack2;
                @Shift.started += instance.OnShift;
                @Shift.performed += instance.OnShift;
                @Shift.canceled += instance.OnShift;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public KeybordMouseActions @KeybordMouse => new KeybordMouseActions(this);

    // Pad
    private readonly InputActionMap m_Pad;
    private IPadActions m_PadActionsCallbackInterface;
    private readonly InputAction m_Pad_Move;
    private readonly InputAction m_Pad_Attack1;
    private readonly InputAction m_Pad_Attack2;
    private readonly InputAction m_Pad_Sub1;
    private readonly InputAction m_Pad_Sub2;
    private readonly InputAction m_Pad_Shift;
    private readonly InputAction m_Pad_Pause;
    public struct PadActions
    {
        private @KeyMap m_Wrapper;
        public PadActions(@KeyMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Pad_Move;
        public InputAction @Attack1 => m_Wrapper.m_Pad_Attack1;
        public InputAction @Attack2 => m_Wrapper.m_Pad_Attack2;
        public InputAction @Sub1 => m_Wrapper.m_Pad_Sub1;
        public InputAction @Sub2 => m_Wrapper.m_Pad_Sub2;
        public InputAction @Shift => m_Wrapper.m_Pad_Shift;
        public InputAction @Pause => m_Wrapper.m_Pad_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Pad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PadActions set) { return set.Get(); }
        public void SetCallbacks(IPadActions instance)
        {
            if (m_Wrapper.m_PadActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PadActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PadActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PadActionsCallbackInterface.OnMove;
                @Attack1.started -= m_Wrapper.m_PadActionsCallbackInterface.OnAttack1;
                @Attack1.performed -= m_Wrapper.m_PadActionsCallbackInterface.OnAttack1;
                @Attack1.canceled -= m_Wrapper.m_PadActionsCallbackInterface.OnAttack1;
                @Attack2.started -= m_Wrapper.m_PadActionsCallbackInterface.OnAttack2;
                @Attack2.performed -= m_Wrapper.m_PadActionsCallbackInterface.OnAttack2;
                @Attack2.canceled -= m_Wrapper.m_PadActionsCallbackInterface.OnAttack2;
                @Sub1.started -= m_Wrapper.m_PadActionsCallbackInterface.OnSub1;
                @Sub1.performed -= m_Wrapper.m_PadActionsCallbackInterface.OnSub1;
                @Sub1.canceled -= m_Wrapper.m_PadActionsCallbackInterface.OnSub1;
                @Sub2.started -= m_Wrapper.m_PadActionsCallbackInterface.OnSub2;
                @Sub2.performed -= m_Wrapper.m_PadActionsCallbackInterface.OnSub2;
                @Sub2.canceled -= m_Wrapper.m_PadActionsCallbackInterface.OnSub2;
                @Shift.started -= m_Wrapper.m_PadActionsCallbackInterface.OnShift;
                @Shift.performed -= m_Wrapper.m_PadActionsCallbackInterface.OnShift;
                @Shift.canceled -= m_Wrapper.m_PadActionsCallbackInterface.OnShift;
                @Pause.started -= m_Wrapper.m_PadActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_PadActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_PadActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_PadActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Attack1.started += instance.OnAttack1;
                @Attack1.performed += instance.OnAttack1;
                @Attack1.canceled += instance.OnAttack1;
                @Attack2.started += instance.OnAttack2;
                @Attack2.performed += instance.OnAttack2;
                @Attack2.canceled += instance.OnAttack2;
                @Sub1.started += instance.OnSub1;
                @Sub1.performed += instance.OnSub1;
                @Sub1.canceled += instance.OnSub1;
                @Sub2.started += instance.OnSub2;
                @Sub2.performed += instance.OnSub2;
                @Sub2.canceled += instance.OnSub2;
                @Shift.started += instance.OnShift;
                @Shift.performed += instance.OnShift;
                @Shift.canceled += instance.OnShift;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public PadActions @Pad => new PadActions(this);

    // JoyStick
    private readonly InputActionMap m_JoyStick;
    private IJoyStickActions m_JoyStickActionsCallbackInterface;
    private readonly InputAction m_JoyStick_Move;
    private readonly InputAction m_JoyStick_Attack1;
    private readonly InputAction m_JoyStick_Attack2;
    private readonly InputAction m_JoyStick_Sub1;
    private readonly InputAction m_JoyStick_Sub2;
    private readonly InputAction m_JoyStick_Shift;
    private readonly InputAction m_JoyStick_Pause;
    public struct JoyStickActions
    {
        private @KeyMap m_Wrapper;
        public JoyStickActions(@KeyMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_JoyStick_Move;
        public InputAction @Attack1 => m_Wrapper.m_JoyStick_Attack1;
        public InputAction @Attack2 => m_Wrapper.m_JoyStick_Attack2;
        public InputAction @Sub1 => m_Wrapper.m_JoyStick_Sub1;
        public InputAction @Sub2 => m_Wrapper.m_JoyStick_Sub2;
        public InputAction @Shift => m_Wrapper.m_JoyStick_Shift;
        public InputAction @Pause => m_Wrapper.m_JoyStick_Pause;
        public InputActionMap Get() { return m_Wrapper.m_JoyStick; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JoyStickActions set) { return set.Get(); }
        public void SetCallbacks(IJoyStickActions instance)
        {
            if (m_Wrapper.m_JoyStickActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_JoyStickActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_JoyStickActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_JoyStickActionsCallbackInterface.OnMove;
                @Attack1.started -= m_Wrapper.m_JoyStickActionsCallbackInterface.OnAttack1;
                @Attack1.performed -= m_Wrapper.m_JoyStickActionsCallbackInterface.OnAttack1;
                @Attack1.canceled -= m_Wrapper.m_JoyStickActionsCallbackInterface.OnAttack1;
                @Attack2.started -= m_Wrapper.m_JoyStickActionsCallbackInterface.OnAttack2;
                @Attack2.performed -= m_Wrapper.m_JoyStickActionsCallbackInterface.OnAttack2;
                @Attack2.canceled -= m_Wrapper.m_JoyStickActionsCallbackInterface.OnAttack2;
                @Sub1.started -= m_Wrapper.m_JoyStickActionsCallbackInterface.OnSub1;
                @Sub1.performed -= m_Wrapper.m_JoyStickActionsCallbackInterface.OnSub1;
                @Sub1.canceled -= m_Wrapper.m_JoyStickActionsCallbackInterface.OnSub1;
                @Sub2.started -= m_Wrapper.m_JoyStickActionsCallbackInterface.OnSub2;
                @Sub2.performed -= m_Wrapper.m_JoyStickActionsCallbackInterface.OnSub2;
                @Sub2.canceled -= m_Wrapper.m_JoyStickActionsCallbackInterface.OnSub2;
                @Shift.started -= m_Wrapper.m_JoyStickActionsCallbackInterface.OnShift;
                @Shift.performed -= m_Wrapper.m_JoyStickActionsCallbackInterface.OnShift;
                @Shift.canceled -= m_Wrapper.m_JoyStickActionsCallbackInterface.OnShift;
                @Pause.started -= m_Wrapper.m_JoyStickActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_JoyStickActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_JoyStickActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_JoyStickActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Attack1.started += instance.OnAttack1;
                @Attack1.performed += instance.OnAttack1;
                @Attack1.canceled += instance.OnAttack1;
                @Attack2.started += instance.OnAttack2;
                @Attack2.performed += instance.OnAttack2;
                @Attack2.canceled += instance.OnAttack2;
                @Sub1.started += instance.OnSub1;
                @Sub1.performed += instance.OnSub1;
                @Sub1.canceled += instance.OnSub1;
                @Sub2.started += instance.OnSub2;
                @Sub2.performed += instance.OnSub2;
                @Sub2.canceled += instance.OnSub2;
                @Shift.started += instance.OnShift;
                @Shift.performed += instance.OnShift;
                @Shift.canceled += instance.OnShift;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public JoyStickActions @JoyStick => new JoyStickActions(this);

    // Share
    private readonly InputActionMap m_Share;
    private IShareActions m_ShareActionsCallbackInterface;
    private readonly InputAction m_Share_Move;
    private readonly InputAction m_Share_Pause;
    private readonly InputAction m_Share_Attack1;
    private readonly InputAction m_Share_Attack2;
    public struct ShareActions
    {
        private @KeyMap m_Wrapper;
        public ShareActions(@KeyMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Share_Move;
        public InputAction @Pause => m_Wrapper.m_Share_Pause;
        public InputAction @Attack1 => m_Wrapper.m_Share_Attack1;
        public InputAction @Attack2 => m_Wrapper.m_Share_Attack2;
        public InputActionMap Get() { return m_Wrapper.m_Share; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShareActions set) { return set.Get(); }
        public void SetCallbacks(IShareActions instance)
        {
            if (m_Wrapper.m_ShareActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_ShareActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_ShareActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_ShareActionsCallbackInterface.OnMove;
                @Pause.started -= m_Wrapper.m_ShareActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_ShareActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_ShareActionsCallbackInterface.OnPause;
                @Attack1.started -= m_Wrapper.m_ShareActionsCallbackInterface.OnAttack1;
                @Attack1.performed -= m_Wrapper.m_ShareActionsCallbackInterface.OnAttack1;
                @Attack1.canceled -= m_Wrapper.m_ShareActionsCallbackInterface.OnAttack1;
                @Attack2.started -= m_Wrapper.m_ShareActionsCallbackInterface.OnAttack2;
                @Attack2.performed -= m_Wrapper.m_ShareActionsCallbackInterface.OnAttack2;
                @Attack2.canceled -= m_Wrapper.m_ShareActionsCallbackInterface.OnAttack2;
            }
            m_Wrapper.m_ShareActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Attack1.started += instance.OnAttack1;
                @Attack1.performed += instance.OnAttack1;
                @Attack1.canceled += instance.OnAttack1;
                @Attack2.started += instance.OnAttack2;
                @Attack2.performed += instance.OnAttack2;
                @Attack2.canceled += instance.OnAttack2;
            }
        }
    }
    public ShareActions @Share => new ShareActions(this);
    private int m_PadSchemeIndex = -1;
    public InputControlScheme PadScheme
    {
        get
        {
            if (m_PadSchemeIndex == -1) m_PadSchemeIndex = asset.FindControlSchemeIndex("Pad");
            return asset.controlSchemes[m_PadSchemeIndex];
        }
    }
    private int m_KeybordSchemeIndex = -1;
    public InputControlScheme KeybordScheme
    {
        get
        {
            if (m_KeybordSchemeIndex == -1) m_KeybordSchemeIndex = asset.FindControlSchemeIndex("Keybord");
            return asset.controlSchemes[m_KeybordSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    public interface IKeybordMouseActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack1(InputAction.CallbackContext context);
        void OnAttack2(InputAction.CallbackContext context);
        void OnShift(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IPadActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack1(InputAction.CallbackContext context);
        void OnAttack2(InputAction.CallbackContext context);
        void OnSub1(InputAction.CallbackContext context);
        void OnSub2(InputAction.CallbackContext context);
        void OnShift(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IJoyStickActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack1(InputAction.CallbackContext context);
        void OnAttack2(InputAction.CallbackContext context);
        void OnSub1(InputAction.CallbackContext context);
        void OnSub2(InputAction.CallbackContext context);
        void OnShift(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IShareActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnAttack1(InputAction.CallbackContext context);
        void OnAttack2(InputAction.CallbackContext context);
    }
}
